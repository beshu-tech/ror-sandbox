# Stage 1: Builder stage | pull Ubuntu, install tools, download Kibana bundle and patch configs
# required to be separate since from Kibana 9 we have min. image without packaging tools
ARG KBN_VERSION=9.0.1
FROM ubuntu:20.04 AS builder

ARG KBN_VERSION
ARG ROR_VERSION=1.64.1

RUN apt-get update && apt-get install -y --no-install-recommends bash sed wget \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /build
RUN wget -q https://artifacts.elastic.co/downloads/kibana/kibana-${KBN_VERSION}-linux-x86_64.tar.gz \
  && tar xzf kibana-${KBN_VERSION}-linux-x86_64.tar.gz \
  && mv kibana-${KBN_VERSION}-linux-x86_64 kibana
COPY ./ror-demo-cluster /build/ror-demo-cluster

WORKDIR /build/ror-demo-cluster
# disabling SSL in Kibana config
RUN for f in ror-newplatform-kibana.yml ror-oldplatform-kibana.yml; do \
      sed -i 's/server.ssl.enabled: true/server.ssl.enabled: false/' conf/kbn/$f; \
    done

# Stage 2: start from the official Kibana image and copy in everything we need
FROM docker.elastic.co/kibana/kibana:${KBN_VERSION}

ARG ROR_VERSION

USER root
COPY --from=builder /build/ror-demo-cluster/conf/kbn/ror-newplatform-kibana.yml /usr/share/kibana/config/ror-newplatform-kibana.yml
COPY --from=builder /build/ror-demo-cluster/conf/kbn/ror-oldplatform-kibana.yml /usr/share/kibana/config/ror-oldplatform-kibana.yml
# at least .key is required even without SSL enabled ssl_config will be run @ startup
COPY --from=builder /build/ror-demo-cluster/conf/kbn/kibana.crt /usr/share/kibana/config/kibana.crt
COPY --from=builder /build/ror-demo-cluster/conf/kbn/kibana.key /usr/share/kibana/config/kibana.key
COPY --from=builder /build/ror-demo-cluster/images/kbn/install-ror-kbn-using-api.sh /tmp/install-ror.sh

WORKDIR /usr/share/kibana
RUN chmod +x /tmp/install-ror.sh \
  && /tmp/install-ror.sh \
  && chown -R kibana:kibana /usr/share/kibana/config

USER kibana
